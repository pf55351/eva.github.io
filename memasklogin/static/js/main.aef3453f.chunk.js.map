{"version":3,"sources":["metamask.svg","Modal.js","App.js","reportWebVitals.js","index.js"],"names":["Modal","fieldsModal","setFieldsModal","console","log","show","useState","showModal","setShowModal","success","danger","title","showConfirm","onConfirm","body","onClick","e","preventDefault","undefined","fullwidth","color","btnType","App","isLoading","web3","Web3","givenProvider","hasMetamask","provider","currentProvider","window","ethereum","isMetaMask","handlerClik","useCallback","a","eth","getAccounts","accounts","sendAsync","method","params","utils","utf8ToHex","from","_err","result","error","size","Header","backgroundColor","my","display","flexDirection","alignItems","justifyContent","src","logo","textColor","subtitle","Body","loading","rounded","Footer","style","textAlign","href","rel","target","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.aef3453f.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/metamask.45038d58.svg\";","import React, { useState } from \"react\";\nimport SweetAlert from \"react-bootstrap-sweetalert\";\nimport \"bulma/css/bulma.min.css\";\nimport { Content, Button } from \"react-bulma-components\";\n\nfunction Modal({ fieldsModal, setFieldsModal }) {\n  console.log(fieldsModal);\n  const { show } = fieldsModal;\n  const [showModal, setShowModal] = useState(show);\n\n  const handlerClick = (e) => {\n    e.preventDefault();\n    setShowModal(\"false\");\n    setFieldsModal(undefined);\n  };\n\n  return (\n    <div>\n      <SweetAlert\n        show={showModal === \"true\" ? true : false}\n        success={fieldsModal.success === \"true\" ? true : false}\n        danger={fieldsModal.danger === \"true\" ? true : false}\n        title={fieldsModal.title}\n        showConfirm={false}\n        onConfirm={() => {}}\n      >\n        <Content>\n          <p>{fieldsModal.body}</p>\n          <Button\n            onClick={handlerClick}\n            fullwidth={true}\n            color={fieldsModal.btnType}\n          >\n            OK\n          </Button>\n        </Content>\n      </SweetAlert>\n    </div>\n  );\n}\n\nexport default Modal;\n","import { useState, useCallback } from \"react\";\nimport \"bulma/css/bulma.min.css\";\nimport {\n  Container,\n  Heading,\n  Content,\n  Button,\n  Image,\n} from \"react-bulma-components\";\nimport Hero from \"react-bulma-components/esm/components/hero\";\nimport Footer from \"react-bulma-components/cjs/components/footer\";\nimport logo from \"./metamask.svg\";\nimport Web3 from \"web3\";\nimport Modal from \"./Modal\";\n\nfunction App() {\n  const [isLoading, setIsLoading] = useState(false);\n  const [ethAddress, setEthAddress] = useState(\"\");\n  const [fieldsModal, setFieldsModal] = useState(undefined);\n\n  let web3 = new Web3(Web3.givenProvider);\n  const hasMetamask = () => {\n    const provider = web3.currentProvider;\n    if (provider && provider === window.ethereum && provider.isMetaMask) {\n      console.log(\"MetaMask is installed!\");\n      return true;\n    } else {\n      return false;\n    }\n  };\n\n  /*\n  const handlerClik =  useCallback(async(e) => {\n    e.preventDefault();\n    if (hasMetamask()) {\n      console.log(\"OK METAMASK\");\n      console.log(web3.eth.accounts[0]);\n      const accounts = await web3.eth.getAccounts()\n      console.log(accounts[0])\n      web3.eth.personal\n        .sign(\n          web3.utils.utf8ToHex(\"Hello world\"),\n          \"0x11f4d0A3c12e86B4b5F39B213F7E19D048276DAe\",\n          \"test password!\"\n        )\n        .then(console.log);\n    } else {\n      setFieldsModal({\n        success: \"false\",\n        danger: \"true\",\n        title: \"No Metamask Extension Founded\",\n        body: \"Please install Metamask extension\",\n        show: \"true\",\n        btnType: \"danger\",\n      });\n    }\n  }, []);\n  */\n\n  const handlerClik = useCallback(async (e) => {\n    e.preventDefault();\n    if (hasMetamask()) {\n      const accounts = await web3.eth.getAccounts()\n      console.log(accounts);\n      // equivalente di web3.eth.personal.sign\n      // web3.eth.personal.sign chiama questa fx\n      window.ethereum.sendAsync(\n        {\n          method: 'personal_sign',\n          params: [web3.utils.utf8ToHex('Hello world'), accounts[0]],\n          from: accounts[0]\n        },\n        (_err, { result }) => (_err ? console.error(_err) : console.log(result))\n      )\n\n      /*web3.eth.personal\n        .sign(\n          web3.utils.utf8ToHex(\"Hello world\"),\n          accounts[0]\n        )\n        .then(console.log);*/\n    } else {\n      setFieldsModal({\n        success: \"false\",\n        danger: \"true\",\n        title: \"No Metamask Extension Founded\",\n        body: \"Please install Metamask extension\",\n        show: \"true\",\n        btnType: \"danger\",\n      });\n    }\n  }, [hasMetamask, web3.eth, web3.utils]);\n\n  console.log(\"A\", fieldsModal);\n\n  return (\n    <div>\n      {fieldsModal !== undefined && (\n        <Modal setFieldsModal={setFieldsModal} fieldsModal={fieldsModal} />\n      )}\n      <Hero size=\"fullheight\">\n        <Hero.Header backgroundColor=\"primary\">\n          <Container\n            my={5}\n            display=\"flex\"\n            flexDirection=\"column\"\n            alignItems=\"center\"\n            justifyContent=\"center\"\n          >\n            <Image src={logo} size={128} />\n            <Heading textColor={\"white\"}>Decentralized Login</Heading>\n            <Heading textColor=\"grey\" subtitle size={3}>\n              Simple Login Demo with MetaMask\n            </Heading>\n          </Container>\n        </Hero.Header>\n        <Hero.Body>\n          <Container display=\"flex\" justifyContent=\"center\" alignItems=\"center\">\n            <Content>\n              <Button\n                size=\"medium\"\n                loading={isLoading}\n                rounded=\"true\"\n                fullwidth=\"true\"\n                color=\"warning\"\n                onClick={handlerClik}\n              >\n                Login with MetaMask\n              </Button>\n            </Content>\n          </Container>\n        </Hero.Body>\n        <Hero.Footer>\n          <Footer>\n            <Container>\n              <Content style={{ textAlign: \"center\" }}>\n                <p>\n                  <strong>Decentralized Login Demo</strong> by{\" \"}\n                  <a\n                    href=\"https://www.francescoprimerano.it\"\n                    rel=\"noreferrer\"\n                    target=\"_blank\"\n                  >\n                    Francesco Primerano\n                  </a>\n                  . The source code is licensed under\n                  <a href=\"http://opensource.org/licenses/mit-license.php\">\n                    {\" \"}\n                    MIT\n                  </a>\n                </p>\n                <p>\n                  The repository of this project is avaiable on{\" \"}\n                  <a\n                    href=\"https://github.com/pf55351/dencentralizedLogin\"\n                    rel=\"noreferrer\"\n                    target=\"_blank\"\n                  >\n                    github\n                  </a>\n                </p>\n              </Content>\n            </Container>\n          </Footer>\n        </Hero.Footer>\n      </Hero>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}